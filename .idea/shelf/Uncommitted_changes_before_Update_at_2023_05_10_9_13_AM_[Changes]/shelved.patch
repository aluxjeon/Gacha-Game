Index: src/main/ui/MainMenuGUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\n\nimport model.*;\nimport model.Event;\nimport persistence.JsonReader;\nimport persistence.JsonWriter;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.ArrayList;\n\nimport static java.awt.Font.PLAIN;\n\npublic class MainMenuGUI extends JFrame implements ActionListener, WindowListener, WindowFocusListener,\n        WindowStateListener {\n    private final Item baseSword = new Item(\"Poop Sword\",3,true,0);\n    private final ArrayList<Characters> myCharacterInventory;\n    private final ArrayList<Item> myItemInventory;\n    private final Currency myCurrency;\n    private final CharacterGacha characterGacha;\n    private final ItemGacha itemGacha;\n    private static final String JSON_STORE = \"./data/workroom.json\";\n    private final WorkRoom workRoom;\n    private final JsonWriter jsonWriter;\n    private final JsonReader jsonReader;\n\n    private final JButton hireButton = new JButton();\n    private final JButton inventoryButton = new JButton();\n    private final JButton saveButton = new JButton();\n    private final JButton loadButton = new JButton();\n\n    //Makes new MainMenuGUI. Initializes myCurrency, characterGacha, itemGacha, myCharacterInventory,\n    // myItemInventory based on given parameters. Initialize the items and characters into rosters for\n    // characterGacha and itemGacha. Makes new workroom, jsonwriter, jsonreader. Makes main page GUI.\n    public MainMenuGUI(Currency currency,CharacterGacha characterGacha,ItemGacha itemGacha) {\n        this.myCurrency = currency;\n        this.characterGacha = characterGacha;\n        this.itemGacha = itemGacha;\n        this.myCharacterInventory = this.characterGacha.getCharacterList();\n        this.myItemInventory = this.itemGacha.getItemList();\n        initializeItems();\n        initializeCharacters();\n        workRoom = new WorkRoom(\"Alex's workroom\");\n        jsonWriter = new JsonWriter(JSON_STORE);\n        jsonReader = new JsonReader(JSON_STORE);\n        makeMainPageGUI();\n    }\n\n\n    //====================GUI==========================\n    //MODIFIES: this\n    //EFFECTS: Makes main page GUI and initializes its GUI components with helper\n    // methods\n    public void makeMainPageGUI() {\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        this.setLayout(new FlowLayout());\n        this.setResizable(false);\n        this.setSize(600,400);\n        this.getContentPane().setBackground(Color.white);\n        hireButton();\n        inventoryButton();\n        saveButton();\n        loadButton();\n        gameTitleLabel();\n        buildingImagePanel();\n        this.setLayout(null);\n        this.setVisible(true);\n        addWindowListener(this);\n        addWindowFocusListener(this);\n        addWindowStateListener(this);\n    }\n\n\n    //===================GUI Components==================\n    //MODIFIES: this\n    //EFFECTS: Initialize hireButton & add to GUI\n    private void hireButton() {\n        hireButton.setBackground(Color.green);\n        hireButton.setOpaque(true);\n        hireButton.setText(\"HIRE\");\n        hireButton.setFont(new Font(\"Lucida Handwriting\",PLAIN,25));\n        hireButton.setBounds(300,60,250,100);\n        hireButton.addActionListener(this);\n        this.add(hireButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initialize inventoryButton & add to GUI\n    private void inventoryButton() {\n        inventoryButton.setBackground(Color.green);\n        inventoryButton.setOpaque(true);\n        inventoryButton.setText(\"EMPLOYEES\");\n        inventoryButton.setFont(new Font(\"Lucida Handwriting\",PLAIN,25));\n        inventoryButton.setBounds(300,170,250,100);\n        inventoryButton.addActionListener(this);\n        this.add(inventoryButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initialize saveButton & add to GUI\n    private void saveButton() {\n        saveButton.setBackground(Color.blue);\n        saveButton.setOpaque(true);\n        saveButton.setText(\"SAVE\");\n        saveButton.setFont(new Font(\"Lucida Handwriting\",PLAIN,25));\n        saveButton.setBounds(300,280,115,75);\n        saveButton.addActionListener(this);\n        this.add(saveButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initialize loadButton & add to GUI\n    private void loadButton() {\n        loadButton.setBackground(Color.blue);\n        loadButton.setOpaque(true);\n        loadButton.setText(\"LOAD\");\n        loadButton.setFont(new Font(\"Lucida Handwriting\",PLAIN,25));\n        loadButton.setBounds(435,280,115,75);\n        loadButton.addActionListener(this);\n        this.add(loadButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initialize/Creates gameTitleLabel & add to GUI\n    private void gameTitleLabel() {\n        JLabel gameTitleLabel = new JLabel();\n        gameTitleLabel.setText(\"Company Inc. Game\");\n        gameTitleLabel.setFont(new Font(\"Lucida Handwriting\",PLAIN,25));\n        gameTitleLabel.setForeground(Color.black);\n        gameTitleLabel.setBounds(30,20,300,30);\n        this.add(gameTitleLabel);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initialize/Creates buildingImagePanel & add to GUI\n    private void buildingImagePanel() {\n        JPanel buildingImagePanel = new JPanel();\n        ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/building.png\");\n        JLabel buildingImage = new JLabel();\n        buildingImage.setBounds(0,0,200,300);\n        buildingImage.setIcon(icon);\n        buildingImagePanel.add(buildingImage);\n        buildingImagePanel.setBackground(Color.gray);\n        buildingImagePanel.setOpaque(true);\n        buildingImagePanel.setBounds(50,60,200,300);\n        buildingImagePanel.setLayout(null);\n        this.add(buildingImagePanel);\n    }\n\n\n    //===================ACTION EVENTS==================\n    //MODIFIES: this\n    //EFFECTS: Performs the corresponding feedback based on which button on the GUI is pressed\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        if (e.getSource() == loadButton) {\n            loadWorkRoom();\n            System.out.println(\"LOAD\");\n        } else if (e.getSource() == saveButton) {\n            saveWorkRoom();\n            System.out.println(\"SAVE\");\n        } else if (e.getSource() == inventoryButton) {\n            this.dispose();\n            InventoryMenuGUI inventoryMenuGUI = new InventoryMenuGUI(myCurrency,characterGacha,itemGacha);\n            System.out.println(\"INVENTORY\");\n        } else if (e.getSource() == hireButton) {\n            this.dispose();\n            GachaMenuGUI gachaMenuGUI = new GachaMenuGUI(myCurrency,characterGacha,itemGacha);\n            System.out.println(\"HIRE\");\n        }\n    }\n\n\n    //======================INITIALIZE====================\n\n    //MODIFIES: this\n    //EFFECTS: 1. Sets all the possible characters you can pull for. Each character initially has the item baseSword and\n    //            has 0 copies\n    //         2. Adds 5* & 4* to their respective roster so we can pull for them randomly\n    private void initializeCharacters() {\n        Characters character1 = new Characters(\"TestName1\",5,true, baseSword,0);\n        Characters character2 = new Characters(\"TestName2\",5,true, baseSword,0);\n        Characters character3 = new Characters(\"TestName3\",5,true, baseSword,0);\n        Characters character4 = new Characters(\"TestName4\",5,true, baseSword,0);\n        Characters character5 = new Characters(\"TestName5\",5,true, baseSword,0);\n        Characters character6 = new Characters(\"TestName6\",4,true, baseSword,0);\n        Characters character7 = new Characters(\"TestName7\",4,true, baseSword,0);\n        Characters character8 = new Characters(\"TestName8\",4,true, baseSword,0);\n        Characters character9 = new Characters(\"TestName9\",4,true, baseSword,0);\n        Characters character10 = new Characters(\"TestName10\",4,true, baseSword,0);\n\n        characterGacha.addFiveStarCharacterRoster(character1);\n        characterGacha.addFiveStarCharacterRoster(character2);\n        characterGacha.addFiveStarCharacterRoster(character3);\n        characterGacha.addFiveStarCharacterRoster(character4);\n        characterGacha.addFiveStarCharacterRoster(character5);\n        characterGacha.addFourStarCharacterRoster(character6);\n        characterGacha.addFourStarCharacterRoster(character7);\n        characterGacha.addFourStarCharacterRoster(character8);\n        characterGacha.addFourStarCharacterRoster(character9);\n        characterGacha.addFourStarCharacterRoster(character10);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: 1. Sets all the possible items you can pull for. Each items initially has the status of false and\n    //            has 0 copies\n    //         2. Adds 5* & 4* to their respective roster so we can pull for them randomly\n    private void initializeItems() {\n        Item item1 = new Item(\"TestItem1\",4,false,0);\n        Item item2 = new Item(\"TestItem2\",4,false,0);\n        Item item3 = new Item(\"TestItem3\",4,false,0);\n        Item item4 = new Item(\"TestItem4\",4,false,0);\n        Item item5 = new Item(\"TestItem5\",4,false,0);\n        Item item6 = new Item(\"TestItem6\",5,false,0);\n        Item item7 = new Item(\"TestItem7\",5,false,0);\n        Item item8 = new Item(\"TestItem8\",5,false,0);\n        Item item9 = new Item(\"TestItem9\",5,false,0);\n        Item item10 = new Item(\"TestItem10\",5,false,0);\n\n        itemGacha.addFourStarItemRoster(item1);\n        itemGacha.addFourStarItemRoster(item2);\n        itemGacha.addFourStarItemRoster(item3);\n        itemGacha.addFourStarItemRoster(item4);\n        itemGacha.addFourStarItemRoster(item5);\n        itemGacha.addFiveStarItemRoster(item6);\n        itemGacha.addFiveStarItemRoster(item7);\n        itemGacha.addFiveStarItemRoster(item8);\n        itemGacha.addFiveStarItemRoster(item9);\n        itemGacha.addFiveStarItemRoster(item10);\n    }\n\n    //=======================SAVE / LOAD FUNCTIONS========================\n\n    //MODIFIES: this\n    //EFFECTS: 1. Run addWorkRoomElement()\n    //         2. Run jsonWriter\n    //         3. Print out where it is saved to\n    // If the file cannot be read, then print error and catch FileNotFoundException\n    private void saveWorkRoom() {\n        try {\n            addWorkRoomElement();\n            jsonWriter.open();\n            jsonWriter.write(workRoom);\n            jsonWriter.close();\n            System.out.println(\"Saved \" + workRoom.getName() + \" to \" + JSON_STORE);\n        } catch (FileNotFoundException e) {\n            System.out.println(\"Unable to write to file: \" + JSON_STORE);\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: 1. Read file with jsonReader.read()\n    //         2. Update character pity and item pity and currency\n    //         3. Print out where the JSONObject is loaded from\n    // If the file cannot be read, then print error and catch IOException\n    private void loadWorkRoom() {\n        try {\n            jsonReader.read(myCharacterInventory,myItemInventory);\n            characterGacha.addPity(jsonReader.getCharacterPity());\n            itemGacha.addPity(jsonReader.getItemPity());\n            myCurrency.subCurrency(myCurrency.getCurrency());\n            myCurrency.addCurrency(jsonReader.getCurrency());\n            System.out.println(\"Loaded \" + workRoom.getName() + \" from \" + JSON_STORE);\n        } catch (IOException e) {\n            System.out.println(\"Unable to read from file: \" + JSON_STORE);\n        }\n    }\n\n    // MODIFIES: this\n    // EFFECTS: Add each character and item from workroom to character/item inventory\n    private void addWorkRoomElement() {\n        for (Characters c : myCharacterInventory) {\n            workRoom.addCharacterThingy(c);\n        }\n        for (Item i : myItemInventory) {\n            workRoom.addItemThingy(i);\n        }\n        workRoom.addCurrency(myCurrency.getCurrency());\n        workRoom.addPity(characterGacha.getPity(), itemGacha.getPity());\n    }\n\n\n    //=========================WINDOW LISTENER==========================\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowGainedFocus(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowLostFocus(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowOpened(WindowEvent e) {}\n\n    //EFFECTS: When the window is closed, print out event logs to console\n    @Override\n    public void windowClosing(WindowEvent e) {\n        System.out.println(\"\\n\" + \"=========Event Logs=========\" + \"\\n\");\n        for (Event next : EventLog.getInstance()) {\n            System.out.println(next.toString() + \"\\n\");\n        }\n        System.out.println(\"=========Event Logs=========\" + \"\\n\");\n    }\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowClosed(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowIconified(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowDeiconified(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowActivated(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowDeactivated(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowStateChanged(WindowEvent e) {}\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/MainMenuGUI.java b/src/main/ui/MainMenuGUI.java
--- a/src/main/ui/MainMenuGUI.java	(revision 1a592715a73f4806781cf362fe092ce5c37cfefa)
+++ b/src/main/ui/MainMenuGUI.java	(date 1683677353876)
@@ -137,7 +137,7 @@
     //EFFECTS: Initialize/Creates buildingImagePanel & add to GUI
     private void buildingImagePanel() {
         JPanel buildingImagePanel = new JPanel();
-        ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/building.png");
+        ImageIcon icon = new ImageIcon("src/images/building.png");
         JLabel buildingImage = new JLabel();
         buildingImage.setBounds(0,0,200,300);
         buildingImage.setIcon(icon);
Index: src/main/ui/InventoryMenuGUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\n\nimport model.*;\nimport model.Event;\n\nimport javax.swing.*;\nimport javax.swing.border.Border;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static java.awt.Font.PLAIN;\n\npublic class InventoryMenuGUI extends JFrame implements ActionListener, WindowListener, WindowFocusListener,\n        WindowStateListener {\n    private final JButton backButton = new JButton();\n    private final JButton weaponButton = new JButton();\n    private final JButton topCharacterButton = new JButton();\n    private final JButton midCharacterButton = new JButton();\n    private final JButton botCharacterButton = new JButton();\n    private final JButton upButton = new JButton();\n    private final JButton downButton = new JButton();\n    private final JButton topWeaponButton = new JButton();\n    private final JButton midWeaponButton = new JButton();\n    private final JButton botWeaponButton = new JButton();\n    private final JButton scrollUpWeaponButton = new JButton();\n    private final JButton scrollDownWeaponButton = new JButton();\n    private final JButton equipButton = new JButton();\n\n    private final JPanel itemInventoryPanel = new JPanel();\n    private final JPanel idCardPanel = new JPanel();\n\n    private final JLabel idDetailLabel = new JLabel();\n    private final JLabel idRarityLabel = new JLabel();\n    private final JLabel idImageLabel = new JLabel();\n    private final JLabel weaponLabel = new JLabel();\n    private final JLabel weaponNameLabel = new JLabel();\n    private final JLabel weaponRarityLabel = new JLabel();\n    private final JLabel weaponCopiesLabel = new JLabel();\n    private final JLabel characterImageLabel = new JLabel();\n    private final JLabel idCopiesLabel = new JLabel();\n\n    private Boolean visible = false;\n    private int count = 0;\n    private int itemCount = 0;\n\n    private final CharacterGacha characterGacha;\n    private final ItemGacha itemGacha;\n    private final Currency myCurrency;\n    private final ArrayList<Characters> myCharacterInventory;\n    private final ArrayList<Item> myItemInventory;\n    private final Map<String,ImageIcon> characterPortraits = new HashMap<>();\n    private final Map<String,ImageIcon> characterBigPortraits = new HashMap<>();\n    private final Map<String,ImageIcon> itemPortraits = new HashMap<>();\n    private final Map<String,ImageIcon> itemBigPortraits = new HashMap<>();\n    private final Map<String,ImageIcon> characterFullPortraits = new HashMap<>();\n\n    //EFFECTS: Creates new InventoryMenuGUI. Initialize characterGacha, itemGacha, myCurrency, the char &\n    // item inventories based on the input parameters.Initialize character and item portraits w/ helper methods.\n    public InventoryMenuGUI(Currency currency, CharacterGacha characterGacha, ItemGacha itemGacha) {\n        this.characterGacha = characterGacha;\n        this.itemGacha  = itemGacha;\n        this.myCurrency = currency;\n        this.myCharacterInventory = this.characterGacha.getCharacterList();\n        this.myItemInventory = this.itemGacha.getItemList();\n        initializeCharacterPortraits();\n        initializeItemPortraits();\n        makeInventoryMenuGui();\n        addWindowListener(this);\n        addWindowFocusListener(this);\n        addWindowStateListener(this);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Loops through myCharacterInventory and based on the characters you have, it gets portrait\n    // images from desktop and puts it in hashmap in the form of <name of character, ImageIcon>\n    private void initializeCharacterPortraits() {\n        for (Characters c : this.myCharacterInventory) {\n            ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/\"\n                    + c.getName() + \".png\");\n            characterPortraits.put(c.getName(),icon);\n            ImageIcon bigIcon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/\"\n                    + c.getName() + \"ID.png\");\n            characterBigPortraits.put(c.getName(),bigIcon);\n            ImageIcon fullIcon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/\"\n                    + c.getName() + \"F.png\");\n            characterFullPortraits.put(c.getName(),fullIcon);\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Loops through myItemInventory and based on the items you have, it gets portrait\n    // images from desktop and puts it in hashmap in the form of <name of item, ImageIcon>\n    private void initializeItemPortraits() {\n        for (Item i : this.myItemInventory) {\n            ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/\"\n                    + i.getName() + \".png\");\n            itemPortraits.put(i.getName(),icon);\n            ImageIcon bigIcon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/\"\n                    + i.getName() + \"Big.png\");\n            itemBigPortraits.put(i.getName(),bigIcon);\n        }\n    }\n\n    //===================GUI=====================\n    //MODIFIES: this\n    //EFFECTS: Makes Inventory Menu GUI + its components\n    public void makeInventoryMenuGui() {\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        this.setLayout(new FlowLayout());\n        this.setResizable(false);\n        this.setSize(600,400);\n        this.getContentPane().setBackground(Color.white);\n        itemInventoryPanel();\n        backButton();\n        inventoryTitleLabel();\n        idCardPanel();\n        characterImageLabel();\n        topCharacterButton();\n        midCharacterButton();\n        botCharacterButton();\n        upButton();\n        downButton();\n        scrollPanel();\n        addCharacterPortraits(0);\n        trackCharacterPortraits(0);\n        addItemPortraits(0);\n        addItemPortraits(0);\n        this.setLayout(null);\n        this.setVisible(true);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Sets up the back button in the inventory menu GUI\n    private void backButton() {\n        ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/Back_Button.png\");\n        backButton.setIcon(icon);\n        Border emptyBorder = BorderFactory.createEmptyBorder();\n        backButton.setBorder(emptyBorder);\n        backButton.setBounds(30,10,50,20);\n        backButton.addActionListener(this);\n        this.add(backButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Sets up the square image of character on ID card\n    private void idImageLabel() {\n        idImageLabel.setBounds(10,10,100,100);\n        idCardPanel.add(idImageLabel);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Sets up the weapon button of the corresponding character on ID card\n    private void weaponButton() {\n        weaponButton.setBounds(35,115,50,50);\n        weaponButton.addActionListener(this);\n        idCardPanel.add(weaponButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: In response to the weaponButton being clicked, a new GUI panel with a similar\n    // layout is made with a scroll up/down button, weapon buttons, and a weapon image + card\n    // 1. Initializes the weapon labels & buttons 2. Adds the labels & buttons to the panel\n    // 3. Set panel visibility to false until it is changed later\n    // 4. Panel is added GUI\n    private void itemInventoryPanel() {\n        initializeWeaponLabels();\n        initializeWeaponButton();\n        itemInventoryPanel.add(scrollDownWeaponButton);\n        itemInventoryPanel.add(scrollUpWeaponButton);\n        itemInventoryPanel.add(botWeaponButton);\n        itemInventoryPanel.add(midWeaponButton);\n        itemInventoryPanel.add(topWeaponButton);\n        itemInventoryPanel.add(weaponNameLabel);\n        itemInventoryPanel.add(weaponRarityLabel);\n        itemInventoryPanel.add(weaponCopiesLabel);\n        itemInventoryPanel.add(weaponLabel);\n        itemInventoryPanel.add(equipButton);\n        itemInventoryPanel.setBorder(BorderFactory.createLineBorder(Color.black));\n        itemInventoryPanel.setBounds(115, 70, 300, 270);\n        itemInventoryPanel.setBackground(Color.gray);\n        itemInventoryPanel.setOpaque(true);\n        itemInventoryPanel.setVisible(false);\n        itemInventoryPanel.setLayout(null);\n        this.add(itemInventoryPanel);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Helper method for itemInventoryPanel() to set up all the labels on the panel\n    private void initializeWeaponLabels() {\n        weaponLabel.setBounds(35,100,125,125);\n        weaponLabel.setBackground(Color.white);\n        weaponLabel.setOpaque(true);\n        weaponNameLabel.setText(\"ITEM NAME\");\n        weaponNameLabel.setBounds(10,10,100,20);\n        weaponRarityLabel.setText(\"*****\");\n        weaponRarityLabel.setBounds(10,30,100,20);\n        weaponCopiesLabel.setText(\"Copies: 1\");\n        weaponCopiesLabel.setBounds(10,50,100,20);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Helper method for itemInventoryPanel() to set up all the buttons on the panel\n    private void initializeWeaponButton() {\n        topWeaponButton.setBounds(200,25,75,75);\n        midWeaponButton.setBounds(200,97,75,75);\n        botWeaponButton.setBounds(200,170,75,75);\n        scrollUpWeaponButton.setBounds(200,5,75,20);\n        scrollDownWeaponButton.setBounds(200,245,75,20);\n        ImageIcon upIcon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/Scroll_Button.png\");\n        scrollUpWeaponButton.setIcon(upIcon);\n        ImageIcon downIcon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/Scroll_Button 2.png\");\n        scrollDownWeaponButton.setIcon(downIcon);\n        Border emptyBorder = BorderFactory.createEmptyBorder();\n        scrollDownWeaponButton.setBorder(emptyBorder);\n        scrollUpWeaponButton.setBorder(emptyBorder);\n        scrollUpWeaponButton.addActionListener(this);\n        scrollDownWeaponButton.addActionListener(this);\n        topWeaponButton.addActionListener(this);\n        midWeaponButton.addActionListener(this);\n        botWeaponButton.addActionListener(this);\n        equipButton.addActionListener(this);\n        equipButton.setText(\"Equip\");\n        equipButton.setBounds(10,240,80,25);\n    }\n\n    //MODIFIES: this\n    //EFFECTS:\n    // 1. Initializes idCardPanel\n    // 2.Initializes weaponButton and idImageLabel\n    // 3. If there are characters in the inventory, then change the labels to the first character\n    // in the inventory\n    // 4. Add idCardPanel to GUI\n    private void idCardPanel() {\n        idCardPanel.setBackground(Color.lightGray);\n        idCardPanel.setOpaque(true);\n        idCardPanel.setBounds(30,100,260,175);\n        idCardPanel.setBorder(BorderFactory.createLineBorder(Color.black));\n        weaponButton();\n        idImageLabel();\n        if (myCharacterInventory.size() > 0) {\n            idRarityLabel(myCharacterInventory.get(0).getRarity());\n            idDetailLabel(myCharacterInventory.get(0).getName());\n            idCopiesLabel(myCharacterInventory.get(0).getCopies());\n            idImageLabel.setIcon(characterBigPortraits.get(myCharacterInventory.get(0).getName()));\n            weaponButton.setIcon(itemPortraits.get(myCharacterInventory.get(0).getItem().getName()));\n        }\n        idCardPanel.setLayout(null);\n        this.add(idCardPanel);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: if rarity is 5, then change text to \"*****\" OR if rarity is 4, then change text to \"****\"\n    // ELSE, just leave an empty string. Initialize idRarityLabel & add to GUI\n    private void idRarityLabel(Integer rarity) {\n        if (rarity == 5) {\n            idRarityLabel.setText(\"*****\");\n        } else if (rarity == 4) {\n            idRarityLabel.setText(\"****\");\n        } else {\n            idRarityLabel.setText(\"\");\n        }\n        idRarityLabel.setFont(new Font(\"Lucida Handwriting\",PLAIN,20));\n        idRarityLabel.setBounds(120,50,50,20);\n        idCardPanel.add(idRarityLabel);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Sets text to the number of copies of character & initializes idCopiesLabel and adds to GUI\n    private void idCopiesLabel(Integer copies) {\n        idCopiesLabel.setText(\"Copies: \" + copies);\n        idCopiesLabel.setFont(new Font(\"Lucida Handwriting\",PLAIN,15));\n        idCopiesLabel.setBounds(120,75,100,20);\n        idCardPanel.add(idCopiesLabel);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Displays name of corresponding character & initialize idDetailLabel and add to GUI\n    private void idDetailLabel(String name) {\n        idDetailLabel.setText(name);\n        idDetailLabel.setFont(new Font(\"Lucida Handwriting\",PLAIN,20));\n        idDetailLabel.setBounds(120,20,130,30);\n        idCardPanel.add(idDetailLabel);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Creates a JLabel with text of \"EMPLOYEES\" next to the backButton\n    private void inventoryTitleLabel() {\n        JLabel inventoryTitleLabel = new JLabel();\n        inventoryTitleLabel.setText(\"EMPLOYEES\");\n        inventoryTitleLabel.setForeground(Color.black);\n        inventoryTitleLabel.setBounds(90,10,200,20);\n        inventoryTitleLabel.setFont(new Font(\"Lucida Handwriting\",PLAIN,20));\n        this.add(inventoryTitleLabel);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes the characterImageLabel and adds to GUI. If there are characters in the\n    // character inventory, then set the icon of characterImageLabel as the first character in inventory\n    private void characterImageLabel() {\n        if (myCharacterInventory.size() > 0) {\n            characterImageLabel.setIcon(characterFullPortraits.get(characterGacha.getCharacterList().get(0).getName()));\n        }\n        characterImageLabel.setBounds(300,50,150,300);\n        this.add(characterImageLabel);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes the topCharacterButton and adds to GUI\n    private void topCharacterButton() {\n        topCharacterButton.setBounds(500,50,75,75);\n        topCharacterButton.setBorder(BorderFactory.createLineBorder(Color.black));\n        topCharacterButton.addActionListener(this);\n        this.add(topCharacterButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes the midCharacterButton and adds to GUI\n    private void midCharacterButton() {\n        midCharacterButton.setBounds(500,150,75,75);\n        midCharacterButton.setBorder(BorderFactory.createLineBorder(Color.black));\n        midCharacterButton.addActionListener(this);\n        this.add(midCharacterButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes the botCharacterButton and adds to GUI\n    private void botCharacterButton() {\n        botCharacterButton.setBounds(500,250,75,75); //75x75\n        botCharacterButton.setBorder(BorderFactory.createLineBorder(Color.black));\n        botCharacterButton.addActionListener(this);\n        this.add(botCharacterButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes the upButton and adds to GUI\n    private void upButton() {\n        upButton.setBounds(500,20,75,20);\n        ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/Scroll_Button.png\");\n        upButton.setIcon(icon);\n        Border emptyBorder = BorderFactory.createEmptyBorder();\n        upButton.setBorder(emptyBorder);\n        upButton.addActionListener(this);\n        this.add(upButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes the downButton and adds to GUI\n    private void downButton() {\n        downButton.setBounds(500,340,75,20);\n        ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/Scroll_Button 2.png\");\n        downButton.setIcon(icon);\n        Border emptyBorder = BorderFactory.createEmptyBorder();\n        downButton.setBorder(emptyBorder);\n        downButton.addActionListener(this);\n        this.add(downButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes the scrollPanel and adds to GUI\n    private void scrollPanel() {\n        JPanel scrollPanel = new JPanel();\n        scrollPanel.setBackground(Color.gray);\n        scrollPanel.setOpaque(true);\n        scrollPanel.setBounds(470,0,130,400);\n        this.add(scrollPanel);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Performs the corresponding feedback based on which button on the GUI is pressed\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        if (e.getSource() == backButton) {\n            this.dispose();\n            MainMenuGUI mainMenuGUI = new MainMenuGUI(myCurrency,characterGacha,itemGacha);\n        } else if (e.getSource() == upButton) {\n            scrollUp();\n        } else if (e.getSource() == downButton) {\n            scrollDown();\n        } else if (e.getSource() == botCharacterButton) {\n            if (trackCharacterPortraits(count).get(2) != null) {\n                setId(trackCharacterPortraits(count).get(2));\n            }\n        } else if (e.getSource() == midCharacterButton) {\n            if (trackCharacterPortraits(count).get(1) != null) {\n                setId(trackCharacterPortraits(count).get(1));\n            }\n        } else if (e.getSource() == topCharacterButton) {\n            if (trackCharacterPortraits(count).get(0) != null) {\n                setId(trackCharacterPortraits(count).get(0));\n            }\n        } else {\n            weaponActions(e);\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: An extension of actionPerformed() that deals with all the weapon/item-related buttons\n    private void weaponActions(ActionEvent e) {\n        if (e.getSource() == weaponButton) {\n            weaponButtonActions();\n        } else if (e.getSource() == scrollUpWeaponButton) {\n            scrollUpWeaponButtonAction();\n        } else if (e.getSource() == scrollDownWeaponButton) {\n            scrollDownWeaponButtonAction();\n        } else if (e.getSource() == topWeaponButton) {\n            if (trackItemPortraits(itemCount).get(0) != null) {\n                setItemId(trackItemPortraits(itemCount).get(0));\n            }\n        } else if (e.getSource() == midWeaponButton) {\n            if (trackItemPortraits(itemCount).get(1) != null) {\n                setItemId(trackItemPortraits(itemCount).get(1));\n            }\n        } else if (e.getSource() == botWeaponButton) {\n            if (trackItemPortraits(itemCount).get(2) != null) {\n                setItemId(trackItemPortraits(itemCount).get(2));\n            }\n        } else if (e.getSource() == equipButton) {\n            equipButtonActions();\n        }\n    }\n\n\n    //MODIFIES: this\n    //EFFECTS: If weaponButton is pressed, check if there are items in the inventory and if there are\n    // then, set the id of the first item in the inventory and set the itemInventoryPanel to visible\n    private void weaponButtonActions() {\n        if (itemGacha.getItemList().size() > 0) {\n            if (trackItemPortraits(itemCount).get(0) != null) {\n                setItemId(trackItemPortraits(itemCount).get(0));\n            }\n            visible = !visible;\n            itemInventoryPanel.setVisible(visible);\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: If the scrollUpWeaponButton is pressed, then if there are items with a higher index, then\n    // call addItemPortraits() and trackItemPortraits() with itemCount - 3. ELSE, keep itemCount the same\n    private void scrollUpWeaponButtonAction() {\n        itemCount = itemCount - 3;\n        if (myItemInventory.size() >= itemCount && itemCount >= 0) {\n            addItemPortraits(itemCount);\n            trackItemPortraits(itemCount);\n        } else {\n            itemCount = itemCount + 3;\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: If the scrollDownWeaponButton is pressed, then if there are more items to scroll down to,\n    // then call addItemPortraits() and trackItemPortraits() with itemCount + 3. ELSE, keep itemCount the same\n    private void scrollDownWeaponButtonAction() {\n        itemCount = itemCount + 3;\n        if (myItemInventory.size() > itemCount) {\n            addItemPortraits(itemCount);\n            trackItemPortraits(itemCount);\n        } else {\n            itemCount = itemCount - 3;\n        }\n    }\n\n\n    //MODIFIES: this\n    //EFFECTS: If equipButton is pressed, then if the item isn't already equipped, equip on character.\n    // If the item is already equipped, then give a rando item to the character who is already holding\n    // the item. Then, give the item to the character\n    private void equipButtonActions() {\n        Item item = findItem(weaponNameLabel.getText());\n        if (!item.status()) {\n            findCharacter(idDetailLabel.getText()).equipItem(item);\n            weaponButton.setIcon(itemPortraits.get(weaponNameLabel.getText()));\n        } else {\n            Item randomItem = new Item(\"Random\",3,true,0);\n            findHoldItem(item).equipItem(randomItem);\n            findCharacter(idDetailLabel.getText()).equipItem(item);\n            weaponButton.setIcon(itemPortraits.get(weaponNameLabel.getText()));\n        }\n    }\n\n    //EFFECTS: Return corresponding Characters object who holds given Item object, else return null\n    private Characters findHoldItem(Item item) {\n        for (Characters c : characterGacha.getCharacterList()) {\n            if (c.getItem() == item) {\n                return c;\n            }\n        }\n        return null;\n    }\n\n    //EFFECTS: Return corresponding Item object based on given name, else return null\n    private Item findItem(String name) {\n        for (Item i : itemGacha.getItemList()) {\n            if (i.getName().equals(name)) {\n                return i;\n            }\n        }\n        return null;\n    }\n\n    //EFFECTS: Return corresponding Characters object based on given name, else return null\n    private Characters findCharacter(String name) {\n        for (Characters c : characterGacha.getCharacterList()) {\n            if (c.getName().equals(name)) {\n                return c;\n            }\n        }\n        return null;\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Helper method for the scroll up button. Checks if there are more characters with a lower index\n    // to scroll up to and if there is, then call addCharacterPortraits() and trackCharacterPortraits()\n    // starting from count - 3\n    private void scrollUp() {\n        count = count - 3;\n        if (myCharacterInventory.size() >= count && count >= 0) {\n            addCharacterPortraits(count);\n            trackCharacterPortraits(count);\n        } else {\n            count = count + 3;\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Helper method for the scroll down button. Checks if there are more characters\n    // to scroll down to and if there is, then call addCharacterPortraits() and trackCharacterPortraits()\n    // starting from count + 3\n    private void scrollDown() {\n        count = count + 3;\n        if (myCharacterInventory.size() > count) {\n            addCharacterPortraits(count);\n            trackCharacterPortraits(count);\n        } else {\n            count = count - 3;\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Changes the character information (name, icon, rarity, copies) on the id card panel\n    // to the corresponding character\n    private void setId(Characters character) {\n        if (character.getName() != null) {\n            idDetailLabel.setText(character.getName());\n            idImageLabel.setIcon(characterBigPortraits.get(character.getName()));\n            idCopiesLabel(character.getCopies());\n            weaponButton.setIcon(itemPortraits.get(character.getItem().getName()));\n            characterImageLabel.setIcon(characterFullPortraits.get(character.getName()));\n        } else {\n            System.out.println(\"Error\");\n        }\n        if (character.getRarity() == 5) {\n            idRarityLabel.setText(\"*****\");\n        } else if (character.getRarity() == 4) {\n            idRarityLabel.setText(\"****\");\n        } else {\n            System.out.println(\"Error\");\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Changes the item information (name, icon, rarity, copies) on the weapon panel\n    // to the corresponding item\n    private void setItemId(Item item) {\n        if (item.getName() != null) {\n            weaponNameLabel.setText(item.getName());\n            weaponLabel.setIcon(itemBigPortraits.get(item.getName()));\n            weaponCopiesLabel.setText(\"Copies: \" + item.getCopies());\n        } else {\n            System.out.println(\"Error\");\n        }\n        if (item.getRarity() == 5) {\n            weaponRarityLabel.setText(\"*****\");\n        } else if (item.getRarity() == 4) {\n            weaponRarityLabel.setText(\"****\");\n        } else {\n            System.out.println(\"Error\");\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Based on the parameter start, make a new arraylist and keep track of which character\n    // is in which button\n    private ArrayList<Characters> trackCharacterPortraits(Integer start) {\n        int i = myCharacterInventory.size() - start;\n        int j = start;\n        ArrayList<Characters> characterList = new ArrayList<>();\n        if (!(i <= 0)) {\n            characterList.add(myCharacterInventory.get(j));\n        } else {\n            characterList.add(null);\n        }\n\n        if (!(i - 1 <= 0)) {\n            characterList.add(myCharacterInventory.get(j + 1));\n        } else {\n            characterList.add(null);\n        }\n\n        if (!(i - 2 <= 0)) {\n            characterList.add(myCharacterInventory.get(j + 2));\n        } else {\n            characterList.add(null);\n        }\n\n        return characterList;\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Based on the parameter start, change the character buttons' icons to the corresponding\n    // indices or put null if there are no more indices\n    private void addCharacterPortraits(Integer start) {\n        int i = myCharacterInventory.size() - start;\n        int j = start;\n        if (!(i <= 0)) {\n            topCharacterButton.setIcon(characterPortraits.get(myCharacterInventory.get(j).getName()));\n        } else {\n            topCharacterButton.setIcon(null);\n        }\n\n        if (!(i - 1 <= 0)) {\n            midCharacterButton.setIcon(characterPortraits.get(myCharacterInventory.get(j + 1).getName()));\n        } else {\n            midCharacterButton.setIcon(null);\n        }\n\n        if (!(i - 2 <= 0)) {\n            botCharacterButton.setIcon(characterPortraits.get(myCharacterInventory.get(j + 2).getName()));\n        } else {\n            botCharacterButton.setIcon(null);\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Based on the parameter start, make a new arraylist and keep track of which item\n    // is in which button\n    private ArrayList<Item> trackItemPortraits(Integer start) {\n        int i = myItemInventory.size() - start;\n        int j = start;\n        ArrayList<Item> itemList = new ArrayList<>();\n        if (!(i <= 0)) {\n            itemList.add(myItemInventory.get(j));\n        } else {\n            itemList.add(null);\n        }\n\n        if (!(i - 1 <= 0)) {\n            itemList.add(myItemInventory.get(j + 1));\n        } else {\n            itemList.add(null);\n        }\n\n        if (!(i - 2 <= 0)) {\n            itemList.add(myItemInventory.get(j + 2));\n        } else {\n            itemList.add(null);\n        }\n\n        return itemList;\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Based on the parameter start, change the item buttons' icons to the corresponding\n    // indices or put null if there are no more indices\n    private void addItemPortraits(Integer start) {\n        int i = myItemInventory.size() - start;\n        int j = start;\n        if (!(i <= 0)) {\n            topWeaponButton.setIcon(itemPortraits.get(myItemInventory.get(j).getName()));\n        } else {\n            topWeaponButton.setIcon(null);\n        }\n\n        if (!(i - 1 <= 0)) {\n            midWeaponButton.setIcon(itemPortraits.get(myItemInventory.get(j + 1).getName()));\n        } else {\n            midWeaponButton.setIcon(null);\n        }\n\n        if (!(i - 2 <= 0)) {\n            botWeaponButton.setIcon(itemPortraits.get(myItemInventory.get(j + 2).getName()));\n        } else {\n            botWeaponButton.setIcon(null);\n        }\n    }\n\n    //=========================WINDOW LISTENER==========================\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowGainedFocus(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowLostFocus(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowOpened(WindowEvent e) {}\n\n    //EFFECTS: When the window is closed, print out event logs to console\n    @Override\n    public void windowClosing(WindowEvent e) {\n        System.out.println(\"\\n\" + \"=========Event Logs=========\" + \"\\n\");\n        for (Event next : EventLog.getInstance()) {\n            System.out.println(next.toString() + \"\\n\");\n        }\n        System.out.println(\"=========Event Logs=========\" + \"\\n\");\n    }\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowClosed(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowIconified(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowDeiconified(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowActivated(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowDeactivated(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowStateChanged(WindowEvent e) {}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/InventoryMenuGUI.java b/src/main/ui/InventoryMenuGUI.java
--- a/src/main/ui/InventoryMenuGUI.java	(revision 1a592715a73f4806781cf362fe092ce5c37cfefa)
+++ b/src/main/ui/InventoryMenuGUI.java	(date 1683677353867)
@@ -78,13 +78,13 @@
     // images from desktop and puts it in hashmap in the form of <name of character, ImageIcon>
     private void initializeCharacterPortraits() {
         for (Characters c : this.myCharacterInventory) {
-            ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/"
+            ImageIcon icon = new ImageIcon("src/images/"
                     + c.getName() + ".png");
             characterPortraits.put(c.getName(),icon);
-            ImageIcon bigIcon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/"
+            ImageIcon bigIcon = new ImageIcon("src/images/"
                     + c.getName() + "ID.png");
             characterBigPortraits.put(c.getName(),bigIcon);
-            ImageIcon fullIcon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/"
+            ImageIcon fullIcon = new ImageIcon("src/images/"
                     + c.getName() + "F.png");
             characterFullPortraits.put(c.getName(),fullIcon);
         }
@@ -95,10 +95,10 @@
     // images from desktop and puts it in hashmap in the form of <name of item, ImageIcon>
     private void initializeItemPortraits() {
         for (Item i : this.myItemInventory) {
-            ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/"
+            ImageIcon icon = new ImageIcon("src/images/"
                     + i.getName() + ".png");
             itemPortraits.put(i.getName(),icon);
-            ImageIcon bigIcon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/"
+            ImageIcon bigIcon = new ImageIcon("src/images/"
                     + i.getName() + "Big.png");
             itemBigPortraits.put(i.getName(),bigIcon);
         }
@@ -135,7 +135,7 @@
     //MODIFIES: this
     //EFFECTS: Sets up the back button in the inventory menu GUI
     private void backButton() {
-        ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/Back_Button.png");
+        ImageIcon icon = new ImageIcon("src/images/Back_Button.png");
         backButton.setIcon(icon);
         Border emptyBorder = BorderFactory.createEmptyBorder();
         backButton.setBorder(emptyBorder);
@@ -209,9 +209,9 @@
         botWeaponButton.setBounds(200,170,75,75);
         scrollUpWeaponButton.setBounds(200,5,75,20);
         scrollDownWeaponButton.setBounds(200,245,75,20);
-        ImageIcon upIcon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/Scroll_Button.png");
+        ImageIcon upIcon = new ImageIcon("src/images/Scroll_Button.png");
         scrollUpWeaponButton.setIcon(upIcon);
-        ImageIcon downIcon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/Scroll_Button 2.png");
+        ImageIcon downIcon = new ImageIcon("src/images/Scroll_Button 2.png");
         scrollDownWeaponButton.setIcon(downIcon);
         Border emptyBorder = BorderFactory.createEmptyBorder();
         scrollDownWeaponButton.setBorder(emptyBorder);
@@ -338,7 +338,7 @@
     //EFFECTS: Initializes the upButton and adds to GUI
     private void upButton() {
         upButton.setBounds(500,20,75,20);
-        ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/Scroll_Button.png");
+        ImageIcon icon = new ImageIcon("src/images/Scroll_Button.png");
         upButton.setIcon(icon);
         Border emptyBorder = BorderFactory.createEmptyBorder();
         upButton.setBorder(emptyBorder);
@@ -350,7 +350,7 @@
     //EFFECTS: Initializes the downButton and adds to GUI
     private void downButton() {
         downButton.setBounds(500,340,75,20);
-        ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/Scroll_Button 2.png");
+        ImageIcon icon = new ImageIcon("src/images/Scroll_Button 2.png");
         downButton.setIcon(icon);
         Border emptyBorder = BorderFactory.createEmptyBorder();
         downButton.setBorder(emptyBorder);
Index: src/main/ui/GachaMenuGUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\n\nimport model.*;\nimport model.Event;\n\nimport javax.swing.*;\nimport javax.swing.border.Border;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static java.awt.Font.PLAIN;\n\npublic class GachaMenuGUI extends JFrame implements ActionListener, WindowListener, WindowFocusListener,\n        WindowStateListener {\n    private JButton characterBannerButton;\n    private JButton itemBannerButton;\n    private JButton currencyButton;\n    private JButton showPityButton;\n    private JButton tenPullButton;\n    private JButton onePullButton;\n    private JButton backButton;\n    private final JButton currencyIncreaseButton = new JButton();\n    private final JButton closeButton = new JButton();\n\n    private final JPanel pullPanel = new JPanel();\n    private JPanel currencyPanel;\n    private final JLabel characterBannerLabel = new JLabel();\n    private final JLabel itemBannerLabel = new JLabel();\n    private final JLabel pullLabel = new JLabel();\n\n    private final Map<String,ImageIcon> characterBigPortraits = new HashMap<String,ImageIcon>();\n    private final Map<String,ImageIcon> itemPortraits = new HashMap<String,ImageIcon>();\n    private final ImageIcon poopIcon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/POOP.png\");\n    private final ArrayList<Characters> tenPullCharacterList = new ArrayList<>();\n    private final ArrayList<Item> tenPullItemList = new ArrayList<>();\n    private Boolean visibility = false;\n\n    private final Currency myCurrency;\n    private final CharacterGacha characterGacha;\n    private final ItemGacha itemGacha;\n\n    public GachaMenuGUI(Currency myCurrency, CharacterGacha characterGacha, ItemGacha itemGacha) {\n        this.myCurrency = myCurrency;\n        this.characterGacha = characterGacha;\n        this.itemGacha = itemGacha;\n        initializePortraits();\n        makeGachaMenuGUI();\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Gets all the corresponding image-icons from desktop folder & adds it to\n    // either the character portraits or item portraits\n    private void initializePortraits() {\n        for (Characters c : this.characterGacha.getFiveStarCharacterRoster()) {\n            ImageIcon bigIcon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/\"\n                    + c.getName() + \"ID.png\");\n            characterBigPortraits.put(c.getName(),bigIcon);\n        }\n\n        for (Characters c : this.characterGacha.getFourStarCharacterRoster()) {\n            ImageIcon bigIcon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/\"\n                    + c.getName() + \"ID.png\");\n            characterBigPortraits.put(c.getName(),bigIcon);\n        }\n\n        for (Item i : this.itemGacha.getFiveStarItemRoster()) {\n            ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/\"\n                    + i.getName() + \"M.png\");\n            itemPortraits.put(i.getName(),icon);\n        }\n        for (Item i : this.itemGacha.getFourStarItemRoster()) {\n            ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/\"\n                    + i.getName() + \"M.png\");\n            itemPortraits.put(i.getName(),icon);\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Makes Gacha Menu GUI and initialize Gacha Menu GUI's GUI components\n    public void makeGachaMenuGUI() {\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        this.setLayout(new FlowLayout());\n        this.setResizable(false);\n        this.setSize(600,400);\n        this.getContentPane().setBackground(Color.white);\n        JLabel menuTitleLabel = new JLabel();\n        menuTitleLabel.setText(\"Hire\");\n        menuTitleLabel.setFont(new Font(\"Lucida Handwriting\",PLAIN,15));\n        menuTitleLabel.setBounds(85,10,50,20);\n        menuTitleLabel.setForeground(Color.black);\n        this.add(menuTitleLabel);\n        initializeGuiComp();\n        this.setLayout(null);\n        this.setVisible(true);\n        addWindowListener(this);\n        addWindowFocusListener(this);\n        addWindowStateListener(this);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Helper method that initializes all the GUI components\n    private void initializeGuiComp() {\n        createPullPanel();\n        createBackButton();\n        singlePullButton();\n        createTenPullButton();\n        createPityButton();\n        createCurrencyComponents();\n        createCharacterBannerLabel();\n        createItemBannerLabel();\n        createCharacterBannerButton();\n        createItemBannerButton();\n        createPillarPanel();\n    }\n\n\n    //==============================Pull GUI==========================\n    //MODIFIES: this\n    //EFFECTS: Initializes onePullButton & adds to GUI\n    private void singlePullButton() {\n        onePullButton = new JButton();\n        onePullButton.setBounds(30,305,100,50);\n        ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/Button.png\");\n        onePullButton.setIcon(icon);\n        onePullButton.addActionListener(this);\n        this.add(onePullButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes tenPullButton & adds to GUI\n    private void createTenPullButton() {\n        tenPullButton = new JButton();\n        tenPullButton.setBounds(130,305,100,50);\n        ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/Button 3.png\");\n        tenPullButton.setIcon(icon);\n        tenPullButton.addActionListener(this);\n        this.add(tenPullButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes pullPanel & adds to GUI\n    private void createPullPanel() {\n        closeButton.setBounds(0,0,20,20);\n        closeButton.addActionListener(this);\n        pullLabel.setBounds(250,0,100,100);\n        pullPanel.setLayout(null);\n        pullPanel.setBounds(0,125,600,100);\n        pullPanel.setBackground(Color.lightGray);\n        pullPanel.setVisible(false);\n        pullPanel.add(pullLabel);\n        pullPanel.add(closeButton);\n        this.add(pullPanel);\n    }\n\n    //========================Other GUI========================\n    //MODIFIES: this\n    //EFFECTS: Initializes showPityButton & adds to GUI\n    private void createPityButton() {\n        showPityButton = new JButton();\n        showPityButton.setBounds(330,305,100,50);\n        ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/Button 2.png\");\n        showPityButton.setIcon(icon);\n        showPityButton.addActionListener(this);\n        this.add(showPityButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes backButton & adds to GUI\n    private void createBackButton() {\n        backButton = new JButton();\n        backButton.setBounds(30,10,50,20);\n        ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/Back_Button.png\");\n        backButton.setIcon(icon);\n        Border emptyBorder = BorderFactory.createEmptyBorder();\n        backButton.setBorder(emptyBorder);\n        backButton.addActionListener(this);\n        this.add(backButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes currencyButton, currencyPanel, and currencyIncreaseButton.\n    // currencyButton &  currencyPanel is added to GUI, but currencyIncreaseButton\n    // is added to currencyPanel\n    private void createCurrencyComponents() {\n        currencyButton = new JButton();\n        currencyButton.setBounds(380,10,50,20);\n        currencyButton.setBackground(Color.black);\n        currencyButton.setOpaque(true);\n        currencyButton.addActionListener(this);\n        currencyButton.setText(String.valueOf(this.myCurrency.getCurrency()));\n        currencyButton.setFont(new Font(\"Lucida Handwriting\",PLAIN,15));\n        this.add(currencyButton);\n\n        currencyPanel = new JPanel();\n        currencyPanel.setBounds(380,30,50,25);\n        currencyPanel.setBackground(Color.lightGray);\n        currencyPanel.setOpaque(true);\n        currencyPanel.setVisible(false);\n        currencyPanel.setLayout(null);\n        this.add(currencyPanel);\n\n        currencyIncreaseButton.setBounds(12,0,26,25);\n        currencyIncreaseButton.setText(\"+\");\n        currencyIncreaseButton.setBackground(Color.yellow);\n        currencyIncreaseButton.setOpaque(true);\n        currencyIncreaseButton.addActionListener(this);\n        currencyPanel.add(currencyIncreaseButton);\n    }\n\n    //=======================Right Side Pillar==================\n    //MODIFIES: this\n    //EFFECTS: Initializes pillarPanel and adds to GUI\n    private void createPillarPanel() {\n        JPanel pillarPanel = new JPanel();\n        pillarPanel.setBounds(490,0,50,400);\n        pillarPanel.setBackground(Color.lightGray);\n        this.add(pillarPanel);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes characterBannerButton and adds to GUI\n    private void createCharacterBannerButton() {\n        characterBannerButton = new JButton();\n        characterBannerButton.setBounds(465,100,100,75);\n        ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/CharacterBannerButton.png\");\n        characterBannerButton.setIcon(icon);\n        characterBannerButton.setBorder(BorderFactory.createLineBorder(Color.black));\n        characterBannerButton.addActionListener(this);\n        this.add(characterBannerButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes itemBannerButton and adds to GUI\n    private void createItemBannerButton() {\n        itemBannerButton = new JButton();\n        itemBannerButton.setBounds(465,200,100,75);\n        ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/ItemBannerButton.png\");\n        itemBannerButton.setIcon(icon);\n        itemBannerButton.setBorder(BorderFactory.createLineBorder(Color.black));\n        itemBannerButton.addActionListener(this);\n        this.add(itemBannerButton);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes characterBannerLabel and adds to GUI\n    private void createCharacterBannerLabel() {\n        characterBannerLabel.setBounds(30,30,400,275);\n        ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/CharBanner.png\");\n        characterBannerLabel.setIcon(icon);\n        characterBannerLabel.setVisible(true);\n        characterBannerLabel.setBorder(BorderFactory.createLineBorder(Color.black));\n        this.add(characterBannerLabel);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Initializes itemBannerLabel and adds to GUI\n    private void createItemBannerLabel() {\n        itemBannerLabel.setBounds(30,30,400,275);\n        ImageIcon icon = new ImageIcon(\"/Users/aluxj702/Desktop/CPSC210IMAGES folder/ItemBanner.png\");\n        itemBannerLabel.setIcon(icon);\n        itemBannerLabel.setBorder(BorderFactory.createLineBorder(Color.black));\n        itemBannerLabel.setVisible(false);\n        this.add(itemBannerLabel);\n    }\n\n    //================================ACTION EVENTS==============================\n    //MODIFIES: this\n    //EFFECTS: Performs correct corresponding actions based on which button is pressed\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        if (e.getSource() == characterBannerButton) {\n            characterBannerLabel.setVisible(true);\n            itemBannerLabel.setVisible(false);\n        } else if (e.getSource() == itemBannerButton) {\n            characterBannerLabel.setVisible(false);\n            itemBannerLabel.setVisible(true);\n        } else if (e.getSource() == currencyButton) {\n            visibility = !visibility;\n            currencyPanel.setVisible(visibility);\n        } else if (e.getSource() == currencyIncreaseButton) {\n            this.myCurrency.addCurrency(100);\n            currencyButton.setText(String.valueOf(this.myCurrency.getCurrency()));\n        } else if (e.getSource() == backButton) {\n            this.dispose();\n            MainMenuGUI mainMenuGUI = new MainMenuGUI(myCurrency,characterGacha,itemGacha);\n            System.out.println(\"Back\");\n        } else {\n            gachaRelatedButtonActions(e);\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Performs correct corresponding actions based on which gacha buttons are pressed\n    private void gachaRelatedButtonActions(ActionEvent e) {\n        if (e.getSource() == onePullButton && characterBannerLabel.isVisible()\n                && (0 <= ((this.myCurrency.getCurrency()) - 100))) {\n            pullCharacter();\n        } else if (e.getSource() == onePullButton && itemBannerLabel.isVisible()\n                && (0 <= ((this.myCurrency.getCurrency()) - 100))) {\n            pullItem();\n        } else if (e.getSource() == tenPullButton && characterBannerLabel.isVisible()\n                && (0 <= ((this.myCurrency.getCurrency()) - 1000))) {\n            tenPullCharacter();\n        } else if (e.getSource() == tenPullButton && itemBannerLabel.isVisible()\n                && (0 <= ((this.myCurrency.getCurrency()) - 1000))) {\n            tenPullItem();\n        } else if (e.getSource() == showPityButton && characterBannerLabel.isVisible()) {\n            System.out.println(\"Character Pity: \" + characterGacha.getPity());\n        } else if (e.getSource() == showPityButton && itemBannerLabel.isVisible()) {\n            System.out.println(\"Item Pity: \" + itemGacha.getPity());\n        } else if (e.getSource() == closeButton && characterBannerLabel.isVisible()) {\n            displayTenPulledCharacter();\n        } else if (e.getSource() == closeButton && itemBannerLabel.isVisible()) {\n            displayTenPulledItem();\n        }\n    }\n\n    //==========================HELPER METHODS FOR ACTION EVENTS=================\n    //MODIFIES: this\n    //EFFECTS: Pull character & displays the character by calling displayPulledCharacter()\n    private void pullCharacter() {\n        int prev = characterGacha.getCharacterList().size();\n        characterGacha.pull();\n        myCurrency.subCurrency(100);\n        currencyButton.setText(String.valueOf(this.myCurrency.getCurrency()));\n        displayPulledCharacter(prev);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Pull item & displays the item by calling displayPulledItem()\n    private void pullItem() {\n        int prev = itemGacha.getItemList().size();\n        itemGacha.pull();\n        myCurrency.subCurrency(100);\n        currencyButton.setText(String.valueOf(this.myCurrency.getCurrency()));\n        displayPulledItem(prev);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Does a ten pull for characters and only display new characters. ELSE display poop\n    private void tenPullCharacter() {\n        int listSize = characterGacha.getCharacterList().size();\n\n        characterGacha.tenPull();\n        myCurrency.subCurrency(1000);\n        currencyButton.setText(String.valueOf(this.myCurrency.getCurrency()));\n\n        if (characterGacha.getCharacterList().size() > listSize) {\n            for (int i = listSize;i < characterGacha.getCharacterList().size();i++) {\n                tenPullCharacterList.add(characterGacha.getCharacterList().get(i));\n            }\n            pullLabel.setIcon(characterBigPortraits.get(tenPullCharacterList.get(0).getName()));\n            tenPullCharacterList.remove(0);\n            pullPanel.setVisible(true);\n        } else {\n            pullLabel.setIcon(poopIcon);\n            pullPanel.setVisible(true);\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: Does a ten pull for items and only display new items. ELSE display poop\n    private void tenPullItem() {\n        int listSize = itemGacha.getItemList().size();\n\n        itemGacha.tenPull();\n        myCurrency.subCurrency(1000);\n        currencyButton.setText(String.valueOf(this.myCurrency.getCurrency()));\n\n        if (itemGacha.getItemList().size() > listSize) {\n            for (int i = listSize;i < itemGacha.getItemList().size();i++) {\n                tenPullItemList.add(itemGacha.getItemList().get(i));\n            }\n            pullLabel.setIcon(itemPortraits.get(tenPullItemList.get(0).getName()));\n            tenPullItemList.remove(0);\n            pullPanel.setVisible(true);\n        } else {\n            pullLabel.setIcon(poopIcon);\n            pullPanel.setVisible(true);\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: If there are new characters pulled, then display their icon and remove then from\n    // the tenPullCharacterList. ELSE just set pullPanel to not visible\n    private void displayTenPulledCharacter() {\n        if (tenPullCharacterList.size() > 0) {\n            pullLabel.setIcon(characterBigPortraits.get(tenPullCharacterList.get(0).getName()));\n            tenPullCharacterList.remove(0);\n        } else {\n            pullPanel.setVisible(false);\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: If there are new items pulled, then display their icon and remove then from\n    // the tenPullItemList. ELSE just set pullPanel to not visible\n    private void displayTenPulledItem() {\n        if (tenPullItemList.size() > 0) {\n            pullLabel.setIcon(itemPortraits.get(tenPullItemList.get(0).getName()));\n            tenPullItemList.remove(0);\n        } else {\n            pullPanel.setVisible(false);\n        }\n    }\n\n    //MODIFIES: this\n    //EFFECTS: if the item inventory increased, then get the last item from item\n    // inventory and display its icon on pullLabel.\n    // ELSE, display poop. Set pullLabel to visible\n    private void displayPulledItem(Integer prev) {\n        int prevListSize = prev;\n        if (itemGacha.getItemList().size() > prevListSize) {\n            String name = itemGacha.getItemList().get(\n                    itemGacha.getItemList().size() - 1).getName();\n            pullLabel.setIcon(itemPortraits.get(name));\n        } else {\n            pullLabel.setIcon(poopIcon);\n        }\n        pullPanel.setVisible(true);\n    }\n\n    //MODIFIES: this\n    //EFFECTS: if the character inventory increased, then get the last character from\n    // character inventory and display its icon on pullLabel.\n    // ELSE, display poop. Set pullLabel to visible\n    private void displayPulledCharacter(Integer prev) {\n        int prevListSize = prev;\n        if (characterGacha.getCharacterList().size() > prevListSize) {\n            String name = characterGacha.getCharacterList().get(\n                    characterGacha.getCharacterList().size() - 1).getName();\n            pullLabel.setIcon(characterBigPortraits.get(name));\n        } else {\n            pullLabel.setIcon(poopIcon);\n        }\n        pullPanel.setVisible(true);\n    }\n\n    //=========================WINDOW LISTENER==========================\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowGainedFocus(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowLostFocus(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowOpened(WindowEvent e) {}\n\n    //EFFECTS: When the window is closed, print out event logs to console\n    @Override\n    public void windowClosing(WindowEvent e) {\n        System.out.println(\"\\n\" + \"=========Event Logs=========\" + \"\\n\");\n        for (Event next : EventLog.getInstance()) {\n            System.out.println(next.toString() + \"\\n\");\n        }\n        System.out.println(\"=========Event Logs=========\" + \"\\n\");\n    }\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowClosed(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowIconified(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowDeiconified(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowActivated(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowDeactivated(WindowEvent e) {}\n\n    //EFFECTS: Nothing\n    @Override\n    public void windowStateChanged(WindowEvent e) {}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/GachaMenuGUI.java b/src/main/ui/GachaMenuGUI.java
--- a/src/main/ui/GachaMenuGUI.java	(revision 1a592715a73f4806781cf362fe092ce5c37cfefa)
+++ b/src/main/ui/GachaMenuGUI.java	(date 1683677353872)
@@ -123,7 +123,7 @@
     private void singlePullButton() {
         onePullButton = new JButton();
         onePullButton.setBounds(30,305,100,50);
-        ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/Button.png");
+        ImageIcon icon = new ImageIcon("src/images/Button.png");
         onePullButton.setIcon(icon);
         onePullButton.addActionListener(this);
         this.add(onePullButton);
@@ -134,7 +134,7 @@
     private void createTenPullButton() {
         tenPullButton = new JButton();
         tenPullButton.setBounds(130,305,100,50);
-        ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/Button 3.png");
+        ImageIcon icon = new ImageIcon("src/images/Button 3.png");
         tenPullButton.setIcon(icon);
         tenPullButton.addActionListener(this);
         this.add(tenPullButton);
@@ -161,7 +161,7 @@
     private void createPityButton() {
         showPityButton = new JButton();
         showPityButton.setBounds(330,305,100,50);
-        ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/Button 2.png");
+        ImageIcon icon = new ImageIcon("src/images/Button 2.png");
         showPityButton.setIcon(icon);
         showPityButton.addActionListener(this);
         this.add(showPityButton);
@@ -172,7 +172,7 @@
     private void createBackButton() {
         backButton = new JButton();
         backButton.setBounds(30,10,50,20);
-        ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/Back_Button.png");
+        ImageIcon icon = new ImageIcon("src/images/Back_Button.png");
         backButton.setIcon(icon);
         Border emptyBorder = BorderFactory.createEmptyBorder();
         backButton.setBorder(emptyBorder);
@@ -225,7 +225,7 @@
     private void createCharacterBannerButton() {
         characterBannerButton = new JButton();
         characterBannerButton.setBounds(465,100,100,75);
-        ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/CharacterBannerButton.png");
+        ImageIcon icon = new ImageIcon("src/images/CharacterBannerButton.png");
         characterBannerButton.setIcon(icon);
         characterBannerButton.setBorder(BorderFactory.createLineBorder(Color.black));
         characterBannerButton.addActionListener(this);
@@ -237,7 +237,7 @@
     private void createItemBannerButton() {
         itemBannerButton = new JButton();
         itemBannerButton.setBounds(465,200,100,75);
-        ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/ItemBannerButton.png");
+        ImageIcon icon = new ImageIcon("src/images/ItemBannerButton.png");
         itemBannerButton.setIcon(icon);
         itemBannerButton.setBorder(BorderFactory.createLineBorder(Color.black));
         itemBannerButton.addActionListener(this);
@@ -248,7 +248,7 @@
     //EFFECTS: Initializes characterBannerLabel and adds to GUI
     private void createCharacterBannerLabel() {
         characterBannerLabel.setBounds(30,30,400,275);
-        ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/CharBanner.png");
+        ImageIcon icon = new ImageIcon("src/images/CharBanner.png");
         characterBannerLabel.setIcon(icon);
         characterBannerLabel.setVisible(true);
         characterBannerLabel.setBorder(BorderFactory.createLineBorder(Color.black));
@@ -259,7 +259,7 @@
     //EFFECTS: Initializes itemBannerLabel and adds to GUI
     private void createItemBannerLabel() {
         itemBannerLabel.setBounds(30,30,400,275);
-        ImageIcon icon = new ImageIcon("/Users/aluxj702/Desktop/CPSC210IMAGES folder/ItemBanner.png");
+        ImageIcon icon = new ImageIcon("src/images/ItemBanner.png");
         itemBannerLabel.setIcon(icon);
         itemBannerLabel.setBorder(BorderFactory.createLineBorder(Color.black));
         itemBannerLabel.setVisible(false);
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Alex's CPSC 210 Term Project\n\n## Description of Project:\nThe application will be a gacha game where the user can pulls for characters and use them to fight enemies. \nThis project is of interest to me because I love gacha games—the one I've played the longest thus far is Genshin\nImpact. I also think this would be a really cool way for me to integrate art into code since I draw in my free time! \nMoreover, I think a gacha game sufficiently covers all the criteria of this term project since gacha games are about \ncollecting characters and items, all of which is data that needs to be saved.\n\n\n\n***\n\n**Ways User Interacts With Game:**\n- User can pull for characters with *limited game currency*\n- User can enter an interface to see what *characters & items* the user has\n- During the fights, the user can interact with the selected characters to make them use an ability\n\n***\n\n**Interfaces:**\n- Main Page: Has buttons to  go into other interfaces\n- Gacha Page: Where user can pull characters or items\n- Character Page: Where user can see Characters & Items\n\n***\n\n**User Stories:**\n- As a user, I want to be able to pull for characters & items\n- As a user, I want to be able to see all of the characters & items I have\n- As a user, I want to be able to equip items onto characters\n- As a user, I want to be able to unequip items from characters\n- As a user, I want to be able to see the specific details of items and characters\n- As a user, I want to be able to see my pity count\n- As a user, I want to be able to add currency and check my current currency\n- As a user, I want to be able to save my character and item inventory (if I want to)\n- As a user, I want to be able to save my current amount of currency and pity (if I want to)\n- As a user, I want to be able to have the option to load my saved inventories, currency, and pity\n\n\n***\n\n# Instructions for Grader\n- You can generate the first required action related to adding Xs to a Y by clicking on the \"Hire\" button & going to the \nGachaMenuGUI. When there, by pressing the \"1 Hire\"/\"10 Hire\" button, eventually either a Character or Item (depends on \nwhich banner you are on//Can swap between the two by pressing the two buttons on the very right) will be added to your \ncorresponding inventory.\n- You can generate the second required action related to adding Xs to a Y by clicking on the \"EMPLOYEES\" button & going \nto the InventoryMenuGUI. When there, if you have characters and items in your inventory, then you can click the weapon\nbutton on the ID card and you will see many items (depending on how many you have) and you will see that there is an\n\"Equip\" button. If you press that \"Equip\" button, then the item will be added to the character. (You can press the \nweaponButton again to get out of the weapon menu GUI)\n- You can locate my visual component by just simply running the GUI. There will be an image of a building on\nthe MainMenuGUI. By clicking on \"Hire\" on the MainMenuGUI, you will go to the GachaMenuGUI and see some images of the \ncharacter/item banners. If you have some characters or items, you can go to the InventoryMenuGUI by clicking \"EMPLOYEES\" \non MainMenuGUI and you will see at least 3-4 images of characters and/or items.\n- You can save the state of my application by going to the MainMenuGUI and clicking\nthe \"Save\" button\n- You can reload the state of my application by going to the MainMenuGUI and clicking the\n\"Load\" button\n\n***\n\n# Phase 4: Task 2\nIf an item or character is pulled, then the event log should look like:\n=========Event Logs=========\n\n...\n\nMon Apr 10 11:25:02 PDT 2023\nPulled: Poop!\n\nMon Apr 10 11:25:04 PDT 2023\nPulled: Poop!\n\nMon Apr 10 11:25:06 PDT 2023\nPulled: TestName1!\n\nMon Apr 10 11:25:08 PDT 2023\nPulled: TestItem2!\n\n...\n\n=========Event Logs=========\n\nIf an item is equipped onto a character, then the event log should look like:\n=========Event Logs=========\n\n...\n\nMon Apr 10 11:26:20 PDT 2023\nTestItem1 is now equipped on TestName4\n\n...\n\n=========Event Logs=========\n\nNote: The \"...\" signify that the sample only is a portion of the EventLog\n\n***\n\n# Phase 4: Task 3\n\nI think there is a lot of things I could refactor to make my project\nmore efficient and manageable. \n\nFirst, I think one thing I could do is add an abstract class\nfor my Item and Characters class and/or my CharacterGacha and ItemGacha class to extend. This is because there\nare a lot of overlap in methods and a lot of duplicate code—the gacha classes especially have a lot of copied code \nsince it does the same thing albeit with different objects. Not only would this reduce the amount of work to implement each class, but it would improve coupling by needing to \nchange code in only one place instead of having to go to both classes.\n\nAnother change I would make to the design is maybe make a Pity class that counts the pity and a character/item\ninventory class since I feel like the CharacterGacha and ItemGacha class do too many things in a single class. I'd make \nit so that CharacterGacha and ItemGacha can focus on pulling a character/item, while CharacterInventory and ItemInventory \ncan handle adding characters and items to the inventory and displaying character/item information; the Pity class could\nkeep track of the character and item pity. By separating out these different functions, it makes the code more \nreadable and improves overall cohesion.
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 1a592715a73f4806781cf362fe092ce5c37cfefa)
+++ b/README.md	(date 1683677445362)
@@ -1,4 +1,4 @@
-# Alex's CPSC 210 Term Project
+# Alex Jeon's Gacha Game
 
 ## Description of Project:
 The application will be a gacha game where the user can pulls for characters and use them to fight enemies. 
